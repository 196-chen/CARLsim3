/*!

\page ch9_matlab_oat Chapter 9: MATLAB Offline Analysis Toolbox (OAT)

\author Michael Beyeler
\tableofcontents

In addition to the real-time monitors (see \ref ch7_monitoring), CARLsim provides a versatile Offline Analysis
Toolbox (OAT) written in MATLAB for the visualization and analysis of neuronal, synaptic, and network information.

The OAT is built to work straight out of the box, by operating on binary files that the CARLsim simulation creates
by default.
The easiest way to visualize network activity is to run a Network Monitor (see \ref ch9s2_network_monitor).
However, it is also possible to look at specific groups (see \ref ch9s3_group_monitor) 
or connections (see \ref ch9s4_connection_monitor), and to access the associated spike file binaries
(see \ref ch9s5s2_spike_reader) and weight file binaries (see \ref ch9s5s3_connection_reader) directly.

Every Monitor comes with an InteractiveMode for plotting activity and weights over time,
which allows the use of keyboard commands to step through frames, pause or quit (see \ref ch9s6_interactive_mode).

Every Monitor also provides a whole range of settings to customize the plotting (see \ref ch9s7_customize_plotting)
or recording (see \ref ch9s8_customize_recording) of activity and weights.

For users migrating from CARLsim 2.2, please note that <tt>readNetwork.m</tt> has been replaced with 
Network Monitors (see \ref ch9s2_network_monitor) and <tt>readSpikes.m</tt> has been replaced with
Spike Readers (see \ref ch9s5s2_spike_reader).
For more information please refer to \ref ch9s9_migrating_scripts.


\section ch9s1_getting_started 9.1 Getting Started
\author Michael Beyeler

Before the OAT can be used, the directory "tools/offline_analysis_toolbox" must be added to the MATLAB path.

The "Hello World" project (see \ref ch1s3_project_workflow) provides a short MATLAB script for this
in the <tt>scripts</tt> subdirectory:
\code
>> initOAT     % adds OAT relative path to MATLAB paths
\endcode

Alternatively, the path can be added manually, making changes either permanent by using the MATLAB path tool:
\code
>> pathtool
\endcode
and selecting the directory <tt>%%%CARLSIM_ROOT_DIR%%/tools/offline_analysis_toolbox</tt>,
or just for the current session by explicitly running:
\code
>> addpath "%%CARLSIM_ROOT_DIR%%/tools/offline_analysis_toolbox"
\endcode

Now it should be possible to display the code documentation for different classes by using MATLAB's help browser:
\code
>> doc NetworkMonitor       % open help browser for NetworkMonitor class
\endcode


\section ch9s2_network_monitor 9.2 Network Monitor
\author Michael Beyeler

A Network Monitor can be used to monitor properties as well as the activity of a number of neuronal groups in a
network.

Every CARLsim simulation automatically generates a simulation file ("sim_{name of network}.dat") that can be found
in the results directory of a project or tutorial.
After the simulation is done, plotting overall network activity is as easy as typing in a MATLAB console:
\code
>> NM = NetworkMonitor('results/sim_myNetwork.dat');
>> NM.plot;
\endcode
This will parse the simulation file "results/sim_myNetwork.dat" (where "myNetwork" is the network name parameter
passed to the CARLsim constructor; make sure the file exists) and extract all relevant network information, such as
number and names of groups. For each of these groups, NetworkMonitor will look for spike files created via
SpikeMonitor that follow the default file name pattern (i.e., "spk_{name of group}.dat").

An example output of a randomly connected 80-20 network is shown in the figure below.

\image html 9_networkmonitor.jpg "NetworkMonitor example output."

Other plot types such as histograms, heat maps, and flow fields are available and can be mixed-and-matched.
The plot type of each group can be set using setGroupPlotType:
\code
>> NM = NetworkMonitor('results/sim_myNetwork.dat')
                 simObj: [1x1 SimulationReader]
          resultsFolder: 'results'
             groupNames: {'excit'  'inhib'  'input'}
          groupSubPlots: {[1]  [2]  [3]}
            groupMonObj: {[1x1 GroupMonitor]  [1x1 GroupMonitor]  [1x1 GroupMonitor]}
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}
>> NM.setGroupPlotType('excit', 'histogram'); % set plot type of group 'excit' to histogram
>> NM.setGroupPlotType('inhib', 'flowfield'); % set plot type of group 'inhib' to flowfield
\endcode
The result is shown in the figure below.

\image html 9_plottypes.jpg "NetworkMonitor plot types."

Example usage:
\code
%  A) Automatically add all groups in the network
     >> NM = NetworkMonitor('results/sim_random.dat'); % read sim file
     >> NM.plot; % hit 'p' to pause, 'q' to quit
     >> NM.recordMovie; % plots all groups and saves as 'movie.avi'
     >> NM.setGroupPlotType('inhib','raster'); % switch that group to raster
     >> NM.removeGroup('input'); % exclude this group from plotting    
     >> % etc.
%  B) Add groups one-by-one
     >> NM = NetworkMonitor('results/sim_random.dat',false);
     >> NM.addGroup('input','raster');
     >> NM.plot(1:10,100); % frame=100ms, plot first 10 frames
     >> % etc.
%  C) Add groups whose spike files don't follow the default file name,
%     say 'spikeFile_{groupName}.ext' instead of 'spk_{groupName}.dat'
     >> NM = NetworkMonitor('results/sim_random.dat',false);
     >> NM.setSpikeFileAttributes('spikeFile_','.ext')
     >> NM.addAllGroupsFromFile()
\endcode

\note The raw data of a simulation file can also be read directly using a SimulationReader (see \ref ch9s5s1_simulation_reader).
\see \ref ch9s5s1_simulation_reader
\since v3.0


\section ch9s3_group_monitor 9.3 Group Monitor
\author Michael Beyeler

A Group Monitor can be used to monitor properties as well as the activity of a specific neuronal group in a network.

A Group Monitor will assume that a corresponding spike file was created via SpikeMonitor during the CARLsim simulation.

Example usage:
\code
>> GM = GroupMonitor('excit','results/');
>> GM.plot; % hit 'p' to pause, 'q' to quit
>> GM.setPlotType('heatmap'); % switch to heat map
>> GM.setRecordingAttributes('fps',10); % set recording FPS
>> GM.recordMovie; % plots heat map and saves as 'movie.avi'
>> % etc.
\endcode

\note The raw data of a spike file can also be read directly using a SpikeReader (see \ref ch9s5s2_spike_reader).
\see \ref ch9s5s2_spike_reader
\since v3.0


\section ch9s4_connection_monitor 9.4 Connection Monitor
\author Michael Beyeler

A Connection Monitor can be used to monitor weights.

\note The raw data of a weight file can also be read directly using a ConnectionReader (see \ref ch9s5s3_connection_reader).
\see \ref ch9s5s3_connection_reader
\since v3.0


\section ch9s5_reading_raw_data 9.5 Reading Raw Data
\author Michael Beyeler

Although the OAT provides a variety of functions to simplify the visualization and analysis of network activity
or topology, there might be cases in which the user might like to have complete control over the process.
Therefore, CARLsim also provides a means to directly read the simulation, spike, and weight file binaries
generated during a simulation.


\subsection ch9s5s1_simulation_reader 9.5.1 Simulation Reader


% SimulationReader can be used to read a simulation log file that is
    % created by default ("results/sim_[netName].dat") or by specifically
    % calling method CARLsim::saveSimulation.
    % The returned object contains essential information about the
    % simulation and the network setup.

\subsection ch9s5s2_spike_reader 9.5.2 Spike Reader


\subsection ch9s5s3_connection_reader 9.5.3 Connection Reader



\section ch9s6_interactive_mode 9.6 Interactive Mode
\author Michael Beyeler

Every Monitor comes with an InteractiveMode for plotting activity and weights.
By default, plotting will occur at a predefined speed (5 frames per second), unless otherwise specified using the
method setPlottingAttributes of MATLAB monitors.
At any time, the user can hit key 'p' to pause plotting, or 'q' to quit.
Hitting key 's' will enter stepping mode, which will freeze the current frame until the user either hits the
'right arrow' key (in order to step one frame forward) or the 'left arrow' key (in order to step one frame backward).


\section ch9s7_customize_plotting 9.7 Customizing Plotting
\author Michael Beyeler


\section ch9s8_customize_recording 9.8 Customizing the Recording
\author Michael Beyeler


\section ch9s9_migrating_scripts 9.9 Migrating from CARLsim 2.2
\author Michael Beyeler

Please note that the following scripts from CARLsim 2.2 (from former directory <tt>scripts/common/</tt>) are no
longer available:
- <tt>readFramesFromRgbFile.m</tt>: replaced with VisualStimulus Toolbox (see \ref ch6s3_visual_stimulus_toolbox)
- <tt>readNetwork.m</tt>: replaced with Network Monitors (see \ref ch9s2_network_monitor)
- <tt>readSpikes.m</tt>: replaced with Spike Readers (see \ref ch9s5s2_spike_reader)
- <tt>readSpikesAERtoFull.m</tt>: no longer available
- <tt>writeFramesToRgbFile.m</tt>: replaced with VisualStimulus Toolbox (see \ref ch6s3_visual_stimulus_toolbox)

*/