/*!

\page ch9_matlab_oat Chapter 9: MATLAB Offline Analysis Toolbox (OAT)

\author Michael Beyeler
\tableofcontents

In addition to the real-time monitors (see \ref ch7_monitoring), CARLsim provides a versatile Offline Analysis
Toolbox (OAT) written in MATLAB for the visualization and analysis of neuronal, synaptic, and network information.

The OAT is built to work straight out of the box, by operating on binary files that the CARLsim simulation creates
by default.
The easiest way to visualize network activity is to run a Network Monitor (see \ref ch9s2_network_monitor).
However, it is also possible to look at specific groups (see \ref ch9s3_group_monitor) 
or connections (see \ref ch9s4_connection_monitor), and to access the associated spike file binaries
(see \ref ch9s5s2_spike_reader) and weight file binaries (see \ref ch9s5s3_connection_reader) directly.

Every Monitor comes with an InteractiveMode for plotting activity and weights over time,
which allows the use of keyboard commands to step through frames, pause or quit (see \ref ch9s6_interactive_mode).

Every Monitor also provides a whole range of settings to customize the plotting (see \ref ch9s7_customize_plotting)
or recording (see \ref ch9s8_customize_recording) of activity and weights.

For users migrating from CARLsim 2.2, please note that <tt>readNetwork.m</tt> has been replaced with 
Network Monitors (see \ref ch9s2_network_monitor) and <tt>readSpikes.m</tt> has been replaced with
Spike Readers (see \ref ch9s5s2_spike_reader).
For more information please refer to \ref ch9s9_migrating_scripts.


\section ch9s1_getting_started 9.1 Getting Started
\author Michael Beyeler

Before the OAT can be used, the directory "tools/offline_analysis_toolbox" must be added to the MATLAB path.

The "Hello World" project (see \ref ch1s3_project_workflow) provides a short MATLAB script for this
in the <tt>scripts</tt> subdirectory:
\code
>> initOAT     % adds OAT relative path to MATLAB paths
\endcode

Alternatively, the path can be added manually, making changes either permanent by using the MATLAB path tool:
\code
>> pathtool
\endcode
and selecting the directory <tt>%%%CARLSIM_ROOT_DIR%%/tools/offline_analysis_toolbox</tt>,
or just for the current session by explicitly running:
\code
>> addpath "%%CARLSIM_ROOT_DIR%%/tools/offline_analysis_toolbox"
\endcode

Now it should be possible to display the code documentation for different classes by using MATLAB's help browser:
\code
>> doc NetworkMonitor       % open help browser for NetworkMonitor class
\endcode


\section ch9s2_network_monitor 9.2 Network Monitor
\author Michael Beyeler

A Network Monitor can be used to monitor properties as well as the activity of a number of neuronal groups in a
network.

Every CARLsim simulation automatically generates a simulation file ("sim_{name of network}.dat") that can be found
in the results directory of a project or tutorial.
After the simulation is done, plotting overall network activity is as easy as typing in a MATLAB console:
\code
>> NM = NetworkMonitor('results/sim_myNetwork.dat');
>> NM.plot;
\endcode
This will parse the simulation file "results/sim_myNetwork.dat" (where "myNetwork" is the network name parameter
passed to the CARLsim constructor; make sure the file exists) and extract all relevant network information, such as
number and names of groups. For each of these groups, NetworkMonitor will look for spike files created via
SpikeMonitor that follow the default file name pattern (i.e., "spk_{name of group}.dat").

An example output of a randomly connected 80-20 network is shown in the figure below.

\image html 9_networkmonitor.jpg "NetworkMonitor example output."

Other plot types such as histograms, heat maps, and flow fields are available and can be mixed-and-matched.
The plot type of each group can be set using <tt>setGroupPlotType</tt> and must be one of the plot types
supported by Group Monitors (see \ref ch9s3_group_monitor).
\code
>> NM = NetworkMonitor('results/sim_myNetwork.dat')
                 simObj: [1x1 SimulationReader]
          resultsFolder: 'results'
             groupNames: {'excit'  'inhib'  'input'}
          groupSubPlots: {[1]  [2]  [3]}
            groupMonObj: {[1x1 GroupMonitor]  [1x1 GroupMonitor]  [1x1 GroupMonitor]}
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}
>> NM.setGroupPlotType('excit', 'histogram'); % set plot type of group 'excit' to histogram
>> NM.setGroupPlotType('inhib', 'flowfield'); % set plot type of group 'inhib' to flowfield
\endcode
The result is shown in the figure below.

\image html 9_plottypes.jpg "NetworkMonitor plot types."

Example usage:
\code
%  A) Automatically add all groups in the network
     >> NM = NetworkMonitor('results/sim_random.dat'); % read sim file
     >> NM.plot; % hit 'p' to pause, 'q' to quit
     >> NM.recordMovie; % plots all groups and saves as 'movie.avi'
     >> NM.setGroupPlotType('inhib','raster'); % switch that group to raster
     >> NM.removeGroup('input'); % exclude this group from plotting    
     >> % etc.
%  B) Add groups one-by-one
     >> NM = NetworkMonitor('results/sim_random.dat',false);
     >> NM.addGroup('input','raster');
     >> NM.plot(1:10,100); % frame=100ms, plot first 10 frames
     >> % etc.
%  C) Add groups whose spike files don't follow the default file name,
%     say 'spikeFile_{groupName}.ext' instead of 'spk_{groupName}.dat'
     >> NM = NetworkMonitor('results/sim_random.dat',false);
     >> NM.setSpikeFileAttributes('spikeFile_','.ext')
     >> NM.addAllGroupsFromFile()
\endcode

\note The raw data of a simulation file can also be read directly using a SimulationReader (see \ref ch9s5s1_simulation_reader).
\see \ref ch9s5s1_simulation_reader
\since v3.0


\section ch9s3_group_monitor 9.3 Group Monitor
\author Michael Beyeler

A Group Monitor can be used to monitor properties as well as the activity of a specific neuronal group in a network.
The monitor will assume that a corresponding spike file was created via SpikeMonitor during the CARLsim simulation.

The following methods are available:
\code
>> methods GroupMonitor

getDefaultPlotType        % returns the default plot type for the group
getError                  % returns the current error status (flag and message)
getGrid3D                 % returns the Grid3D dimensions of the group
getNumNeurons             % returns the number of neurons in the group
getSimDurMs               % returns the estimated simulation duration (ms)
getSpikeFileName          % returns spike file name created from template
hasValidSpikeFile         % returns a flag whether valid spike file was found
plot                      % plots data in current figure/axes
recordMovie               % records data from current figure/axes to AVI movie file
setDefaultPlotType        % set default plot type of a group (raster plot, flow field, etc.)
setErrorMode              % set error mode ('standard', 'warning', 'silent')
setGrid3D                 % set the Grid3D dimensions of the group (for plotting and recording)
setPlottingAttributes     % settings for customizing the plotting process
setRecordingAttributes    % settings for customizing the recording process (to AVI file)
setSpikeFileAttributes    % set prefix/suffix of spike file naming template
\endcode

The following public members (properties) are available:
\code
>> properties GroupMonitor

name                      % name of the group
resultsFolder             % path to results folder
supportedErrorModes       % list of supported error modes
supportedPlotTypes        % list of supported plot types
\endcode


\subsection ch9s3s1_create 9.3.1 Creating a Group Monitor

In order to open a Group Monitor, specify the name of the group (given during a CARLsim simulation via
CARLsim::createGroup or CARLsim::createSpikeGeneratorGroup) and the directory in which the spike file resides
(<tt>results/</tt> by default):
\code
>> GM = GroupMonitor('excit','results/');

GM =

  GroupMonitor with properties:

                   name: 'excit'
          resultsFolder: 'results/'
              errorMode: []
    supportedErrorModes: {'standard'  'warning'  'silent'}
     supportedPlotTypes: {'flowfield'  'heatmap'  'histogram'  'raster'}
\endcode
By default, this will look for a spike file named <tt>spk_{group name}.dat</tt> in the <tt>results/</tt> directory,
which is the default name pattern for spike files created with CARLsim::setSpikeMonitor.
\since v3.0


\subsection ch9s3s2_setspikefileattributes 9.3.2 Setting the Spike File Attributes

In case the spike file does not follow the default pattern, creating a Group Monitor will result in the following
warning:
\code
>> GM = GroupMonitor('excit','results/');
Warning: Could not find valid spike file "results/spk_excit.dat". Use setSpikeFileAttributes to
set a proper spike file prefix/suffix
\endcode
and trying to call the plot method will result in an error message:
\code
>> GM.plot
Error using GroupMonitor/throwError (line 1133)
Could not open file "results/spk_excit.dat" with read permission
\endcode

In this case, the method <tt>setSpikeFileAttributes</tt> can be used to change the default prefix and suffix of
the spike file name. In the above case, the prefix would be <tt>spk_</tt> and the suffix would be <tt>.dat</tt>.
Analogously, for a spike file following the naming convention <tt>spike_{group name}.ext</tt> the prefix would be 
<tt>spike_</tt> and the suffix would be <tt>.ext</tt>. After prefix/suffix have been set accordingly, the spike
file will be found and activity can be plotted:
\code
>> GM.setSpikeFileAttributes('spike_','.ext');
>> GM.hasValidSpikeFile()

ans =

     1

>> GM.plot
\endcode
\since v3.0


\subsection ch9s3s3_plot 9.3.3 Plotting Activity

Once a Group Monitor has been set up, activity can be plotted using the <tt>plot</tt> method:
\code
>> GM.plot
\endcode
This will plot the data in bins of 1000 ms in the current figure/axes using a default plot type,
which is determined by the ::Grid3D dimensions of the group (see \ref ch9s3s4_plot_types).

A list of frames to be plotted as well as the histogram bin window (ms) can be specified directly.
For example, the following command would bin the data into frames 500 ms length, and display the
first, second, and eighth frame as a heat map:
\code
>> GM.plot('heatmap',[1 2 8],500);
\endcode

It is also possible to set the default plot type directly, so it does not have to be specified each
time data is plotted or recorded:
\code
>> GM.setDefaultPlotType('histogram')
\endcode

A number of additional plotting attributes can be set via <tt>setPlottingAttributes</tt>, such as the
background color of the figure and the number of frames to be displayed per second
(see \ref ch9s3s5_plot_attributes).

Certain plot types, such as <tt>'heatmap'</tt> or <tt>'flowfield'</tt> depend on appropriate ::Grid3D
dimensions (2D for the former, 3D for the latter).
For example, the heatmap of a population with 100 neurons on a 100x1x1 grid will be a single row.
But, the grid dimensions can be reshaped on-the-fly, to make them easier to visualize:
\code
>> GM.setGrid3D(10,10,1);   % reshape 100x1x1 grid into 10x10x1 grid
>> GM.plot('heatmap')
\endcode
Note that the overall number of neurons must not change when specifying new grid dimensions.

The raw data of a spike file can also be read directly using a SpikeReader (see \ref ch9s5s2_spike_reader).
\see \ref ch9s5s2_spike_reader
\since v3.0


\subsection ch9s3s4_plot_types 9.3.4 Group Monitor Plot Types

A specific plot type can be set using <tt>setDefaultPlotType</tt>:
\code
>> GM.setDefaultPlotType(str);
\endcode
where <tt>str</tt> is either <tt>'flowfield'</tt>, <tt>'heatmap'</tt>, <tt>'histogram'</tt>, or <tt>'raster'</tt>.
This type will then apply to all subsequent plotting and recording commands, unless it is overwritten explicitly
with one of the method's input arguments.

Plot type <tt>'flowfield'</tt> will plot a 2D vector field where the length of the vector is given as the firing
rsate of the neuron times the corresponding vector orientation. The latter is inferred from the third ::Grid3D
dimension, z. For example, Grid3D(10,10,4) plots a 10x10 vector flow field, assuming that neurons with z=0 code
for direction=0deg, z=1 corresponds to direction=90deg, z=2 is 180deg, and z=3 is 270deg.
Vectors with length smaller than 10% of the max in each frame are not shown.

Plot type <tt>'heatmap'</tt> will plot a topographical map of group activity (based on ::Grid3D) where hotter
colors mean higher firing rate.

Plot type <tt>'histogram'</tt> will plot a histogram of firing rates in the group.
The number of bins and whether to plot firing rates (Hz) instead of number of spikes can be set with options
<tt>'histNumBins'</tt> and <tt>'histShowRate'</tt> in method <tt>setPlottingAttributes</tt>.

Plot type <tt>'raster'</tt> will output the data as a raster plot with bin window <tt>binWindowMs</tt>.

\see \ref ch3s3s2_topography
\since v3.0


\subsection ch9s3s5_plot_attributes 9.3.5 Group Monitor Plotting Attributes

The method <tt>setPlottingAttributes(varargin)</tt> can be used to set default plotting attributes.
These default settings will apply to all activity plots, unless their values are overwritten explicitly in the
<tt>plot</tt> method (see \ref ch9s3s3_plot).

The following command sets the value of variable <tt>propertyName1</tt> to value <tt>value1</tt>:
\code
>> GM.setPlottingAttributes('propertyName1',value1);
\endcode
Additional variables can be flexibly appended; order or capitalization does not matter.
A list of available attributes can be displayed via:
\code
>> help GroupMonitor.setPlottingAttributes

GM.setPlottingAttributes(varargin) can be used to set default
settings that will apply to all activity plots.
This function provides control over additional attributes
that are not available as input arguments to GM.plot.
GM.setPlottingAttributes('propertyName1',value1,...) sets the
value of 'propertyName1' to value1.
 
Calling the function without input arguments will restore the
default settings.
 
BGCOLOR         - Set background color for figure. Must be of
                  type ColorSpec (char such as 'w','b','k' or
                  a 3-element vector for RGB channels).
                  Default: 'w'.
BINWINDOWMS     - The binning window (ms) in which the data
                  will be displayed. Default: 1000.
DISPFRAMENR     - A boolean flag that indicates whether to
                  display the frame number. Default: true.
FPS             - The frames per second for the plotting
                  loop. Default: 5.
HISTNUMBINS     - Number of bins for histogram. Default: 10.
HISTSHOWRATE    - A boolean flag to plot mean firing rates
                  (Hz) for plotType='histogram' instead of
                  mere number of spikes. Default: true.
INTERACTIVEMODE - A boolean flag to set InteractiveMode on or
                  off. If it is off, key events/FPS/stepping
                  will take no effect (helpful if you want to
                  take over control yourself). Default: true.
\endcode
\since v3.0


\subsection ch9s3s6_record_movie 9.3.6 Recording a Movie

Activity plots can be directly saved to AVI movie files via the following command:
\code
>> GM.recordMovie;
\endcode

This will generate a default Group Monitor plot (see \ref ch9s3s3_plot) and save the frames to an <tt>.avi</tt>
binary using the MATLAB <tt>VideoWriter</tt> utility.

THERE IS NO WAY TO SPECIFY A PLOT TYPE!!!
\since v3.0


\subsection ch9s3s7_record_attributes 9.3.7 Group Monitor Recording Attributes

The method <tt>setRecordingAttributes(varargin)</tt> can be used to set default recording attributes.
These default settings will apply to all recordings, unless their values are overwritten explicitly in the
<tt>recordMovie</tt> method (see \ref ch9s3s6_record_movie).

The following command sets the value of variable <tt>propertyName1</tt> to value <tt>value1</tt>:
\code
>> GM.setRecordingAttributes('propertyName1',value1);
\endcode
Additional variables can be flexibly appended; order or capitalization does not matter.
A list of available attributes can be displayed via:
\code
>> help GroupMonitor.setRecordingAttributes

GM.setRecordingAttributes(varargin) can be used to set
default settings that will apply to all activity recordings.
This function provides control over additional attributes
that are not available as input arguments to GM.recordMovie.
GM.setRecordingAttributes('propertyName1',value1,...) sets
the value of 'propertyName1' to value1.
 
Calling the function without input arguments will restore the
default settings.
 
BGCOLOR        - Set background color for figure. Must be of
                 type ColorSpec (char such as 'w','b','k' or
                 a 3-element vector for RGB channels). The
                 default is white.
FILENAME       - File name where movie will be stored.
                 Currently the only supported file ending is
                 ".avi".
FPS            - The frames per second for the movie. The
                 default is 10.
WINSIZE        - A 2-element vector specifying the window
                 size of the video as width x height in
                 pixels.Set to [0 0] in order to
                 automatically make the movie window fit to
                 the size of the plot window.
\endcode
\since v3.0


\section ch9s4_connection_monitor 9.4 Connection Monitor
\author Michael Beyeler

A Connection Monitor can be used to monitor weights.

\note The raw data of a weight file can also be read directly using a ConnectionReader (see \ref ch9s5s3_connection_reader).
\see \ref ch9s5s3_connection_reader
\since v3.0


\section ch9s5_reading_raw_data 9.5 Reading Raw Data
\author Michael Beyeler

Although the OAT provides a variety of functions to simplify the visualization and analysis of network activity
or topology, there might be cases in which the user might like to have complete control over the process.
Therefore, CARLsim also provides a means to directly read the simulation, spike, and weight file binaries
generated during a simulation.


\subsection ch9s5s1_simulation_reader 9.5.1 Simulation Reader


% SimulationReader can be used to read a simulation log file that is
    % created by default ("results/sim_[netName].dat") or by specifically
    % calling method CARLsim::saveSimulation.
    % The returned object contains essential information about the
    % simulation and the network setup.

\subsection ch9s5s2_spike_reader 9.5.2 Spike Reader


\subsection ch9s5s3_connection_reader 9.5.3 Connection Reader



\section ch9s6_interactive_mode 9.6 Interactive Mode
\author Michael Beyeler

Every Monitor comes with an InteractiveMode for plotting activity and weights.
By default, plotting will occur at a predefined speed (5 frames per second), unless otherwise specified using the
method setPlottingAttributes of MATLAB monitors.
At any time, the user can hit key 'p' to pause plotting, or 'q' to quit.
Hitting key 's' will enter stepping mode, which will freeze the current frame until the user either hits the
'right arrow' key (in order to step one frame forward) or the 'left arrow' key (in order to step one frame backward).


\section ch9s7_customize_plotting 9.7 Customizing Plotting
\author Michael Beyeler


\section ch9s8_customize_recording 9.8 Customizing the Recording
\author Michael Beyeler


\section ch9s9_migrating_scripts 9.9 Migrating from CARLsim 2.2
\author Michael Beyeler

Please note that the following scripts from CARLsim 2.2 (from former directory <tt>scripts/common/</tt>) are no
longer available:
- <tt>readFramesFromRgbFile.m</tt>: replaced with VisualStimulus Toolbox (see \ref ch6s3_visual_stimulus_toolbox)
- <tt>readNetwork.m</tt>: replaced with Network Monitors (see \ref ch9s2_network_monitor)
- <tt>readSpikes.m</tt>: replaced with Spike Readers (see \ref ch9s5s2_spike_reader)
- <tt>readSpikesAERtoFull.m</tt>: no longer available
- <tt>writeFramesToRgbFile.m</tt>: replaced with VisualStimulus Toolbox (see \ref ch6s3_visual_stimulus_toolbox)

*/