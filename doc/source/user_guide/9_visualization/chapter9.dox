/*!

\page ch9_visualization Chapter 9: Visualization

\tableofcontents


\section ch9s1_matlab_oat 9.1 MATLAB Offline Analysis Toolbox
\author Michael Beyeler

In addition to the real-time monitors (see \ref ch7_monitoring), CARLsim provides a versatile Offline Analysis
Toolbox (OAT) written in MATLAB for the visualization and analysis of neuronal, synaptic, and network information.

The OAT is built to work straight out of the box, by operating on binary files that the CARLsim simulation creates
by default.
The easiest way to visualize network activity is to run a Network Monitor.

However, it is also possible to look at specific groups or connections, and to access the associated spike and
weight binaries directly.

Before the OAT can be used, the directory "tools/offline_analysis_toolbox" must be added to the MATLAB path.
This can be done either permanently, by adding using the MATLAB path tool:
\code
>> pathtool
\endcode
or for the current session, by explicitly running:
\code
>> addpath "%%CARLSIM_ROOT_DIR/tools/offline_analysis_toolbox"
\endcode
In projects and tutorials, this can be easily achieved by running the script "initOAT.m" present in those directories.

Every Monitor comes with an InteractiveMode for plotting activity and weights.
By default, plotting will occur at a predefined speed (5 frames per second), unless otherwise specified using the
method setPlottingAttributes of MATLAB monitors.
At any time, the user can hit key 'p' to pause plotting, or 'q' to quit.
Hitting key 's' will enter stepping mode, which will freeze the current frame until the user either hits the
'right arrow' key (in order to step one frame forward) or the 'left arrow' key (in order to step one frame backward).


\subsection ch9s1s1_network_monitor 9.1.1 Network Monitor
A Network Monitor can be used to monitor properties as well as the activity of a number of neuronal groups in a
network.

Every CARLsim simulation automatically generates a simulation file ("sim_{name of network}.dat") that can be found
in the results directory of a project or tutorial.
After the simulation is done, plotting overall network activity is as easy as typing in a MATLAB console:
\code
>> NM = NetworkMonitor('results/sim_myNetwork.dat');
>> NM.plot;
\endcode
This will parse the simulation file "results/sim_myNetwork.dat" (where "myNetwork" is the network name parameter
passed to the CARLsim constructor; make sure the file exists) and extract all relevant network information, such as
number and names of groups. For each of these groups, NetworkMonitor will look for spike files created via
SpikeMonitor that follow the default file name pattern (i.e., "spk_{name of group}.dat").

An example output is shown in the figure below, of a network that consisted of a randomly connected 80-20
network.

\image html 9_networkmonitor.jpg "NetworkMonitor example output."

Other plot types such as histograms, heat maps, and flow fields are available and can be mixed-and-matched.
The plot type of each group can be set using setGroupPlotType:
\code
>> NM = NetworkMonitor('results/sim_myNetwork.dat')
                 simObj: [1x1 SimulationReader]
          resultsFolder: 'results'
             groupNames: {'excit'  'inhib'  'input'}
          groupSubPlots: {[1]  [2]  [3]}
            groupMonObj: {[1x1 GroupMonitor]  [1x1 GroupMonitor]  [1x1 GroupMonitor]}
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}
>> NM.setGroupPlotType('excit', 'histogram');
>> NM.setGroupPlotType('inhib', 'flowfield');
\endcode
The result is shown in the figure below.

\image html 9_plottypes.jpg "NetworkMonitor plot types."

Example usage:
\code
%  A) Automatically add all groups in the network
     >> NM = NetworkMonitor('results/sim_random.dat'); % read sim file
     >> NM.plot; % hit 'p' to pause, 'q' to quit
     >> NM.recordMovie; % plots all groups and saves as 'movie.avi'
     >> NM.setGroupPlotType('inhib','raster'); % switch that group to raster
     >> NM.removeGroup('input'); % exclude this group from plotting    
     >> % etc.
%  B) Add groups one-by-one
     >> NM = NetworkMonitor('results/sim_random.dat',false);
     >> NM.addGroup('input','raster');
     >> NM.plot(1:10,100); % frame=100ms, plot first 10 frames
     >> % etc.
%  C) Add groups whose spike files don't follow the default file name,
%     say 'spikeFile_{groupName}.ext' instead of 'spk_{groupName}.dat'
     >> NM = NetworkMonitor('results/sim_random.dat',false);
     >> NM.setSpikeFileAttributes('spikeFile_','.ext')
     >> NM.addAllGroupsFromFile()
\endcode

\since v3.0

*/