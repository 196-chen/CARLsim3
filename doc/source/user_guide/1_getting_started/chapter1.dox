/*!

\page ch1_getting_started Chapter 1: Getting Started

\tableofcontents

\section ch1s1_preinstallation 1.1 Pre-Installation
\author Kristofor D. Carlson

CARLsim currently requires the NVIDIA CUDA parallel computing platform to be installed
even if one does not plan to use the GPU implementation.
Future version are planned that allow users to run the CPU implementation without having CUDA installed.

CARLsim requires GPUs with a compute capability of 2.0 or higher.
To find the compute capability of your device please refer to the
<a href="http://en.wikipedia.org/wiki/CUDA" target="_blank"><b>CUDA article on Wikipedia</b></a>.

CARLsim also requires CUDA Toolkit 5.0 or higher.
For platform-specific CUDA installation instructions, please navigate to the
<a href="https://developer.nvidia.com/cuda-zone" target="_blank"><b>NVIDIA CUDA Zone</b></a>.

The rest of the chapter assumes you have successfully installed CUDA on appropriate hardware.


\subsection ch1s1s1_os 1.1.1 Supported Operating Systems
CARLsim has been tested on the following platforms:
- Windows 7
- Ubuntu 12.04
- Ubuntu 12.10
- Ubuntu 13.04
- Ubuntu 13.10
- Ubuntu 14.04
- Arch Linux
- CentOS 6
- Mac OS X

\subsection ch1s1s2_os 1.1.2 Source Directory Layout
Below is the directory layout of the CARLsim source code.
All source code of the core library is contained in the directory <tt>carlsim</tt>.
The sub-directories are key components to the CARLsim simulation library.

The <tt>doc</tt> directory contains doxygen-related source files in <tt>source</tt> and the
pre-compiled HTML version of the documentation in <tt>html</tt>.

The <tt>projects</tt> directory contains a template for writing your first CARLsim program. Users will
start here when they begin writing their first program.

The <tt>tools</tt> directory contains a
number of CARLsim plugins that may be useful to users such as parameter tuning frameworks, MATLAB
scripts, spike generators, and tools for visual stimuli.

\code
├── carlsim                       # CARLsim source code directory
│   ├── connection_monitor          # Utility to record synaptic data
│   ├── group_monitor               # Utility to record neuron group data
│   ├── interface                   # CARLsim interface (public user interface)
│   ├── kernel                      # CARLsim core functionality
│   ├── server                      # Utility to implement real-time server functionality
│   ├── spike_monitor               # Utility to record neuron spike data
│   └── test                        # Google test regression suite tests
├── doc                           # CARLsim documentation generation directory
│   ├── html                        # Generated documentation in html
│   └── source                      # Documentation source code
├── projects                      # User projects directory
│   └── hello_world                 # Project template for new users
└── tools                         # CARLsim tools that are not built-in
    ├── ecj_pti                     # Automated parameter-tuning interface using ECJ
    ├── eo_pti                      # Automated parameter-tuning interface using EO (deprecated)
    ├── offline_analysis_toolbox    # Collection of MATLAB scripts for data analysis
    ├── simple_weight_tuner         # Simple weight parameter-tuning tool
    ├── spike_generators            # Collection of input spike generation tools
    └── visual_stimulus             # Collection of MATLAB/CARLsim tools for visual stimuli
\endcode

\since v3.0


\section ch1s2_installation 1.2 Installation
\author Kristofor D. Carlson
\author Ting-Shuo Chou
\author Michael Beyeler

To install CARLsim, first download and unzip the zip file from the
<a href="http://www.socsci.uci.edu/~jkrichma/CARLsim/index.html">CARL website</a>.
For installation instructions on Linux and Mac OS X platforms, please refer to \ref ch1s2s1_linux below.
For installation instructions on Windows platforms, please refer to \ref ch1s2s2_windows below.


\subsection ch1s2s1_linux 1.2.1 Linux / Mac OS X

Instructions for Linux/Mac OS X installation assume you are using the Bash shell. Additionally, the
GNU GCC compiler collection and GNU Make build environment should be installed. 
On most platforms, these are already installed by default.
After you have unzipped the downloaded CARLsim files, you next have to set installation-specific environment
variables such as information about GPU devices, CUDA Toolkit version, and the desired installation
location.

\subsubsection ch1s2s1s1_environment_variables 1.2.1.1 Environment Variables

The easiest way to set all relevant environment variables is to add the following lines to your
<tt>~/.bashrc</tt> file:
\code
# CARLsim mandatory variables
export CARLSIM_LIB_DIR=/opt/CARL/CARLsim
export CUDA_INSTALL_PATH=/usr/local/cuda
export CARLSIM_CUDAVER=6
export CUDA_MAJOR_NUM=3
export CUDA_MINOR_NUM=5

# CARLsim optional variables
export CARLSIM_FASTMATH=0
export CARLSIM_CUOPTLEVEL=3
\endcode

The desired installation location of the CARLsim library is specified with the
<tt>CARLSIM_LIB_DIR</tt> variable. The major and minor compute capability numbers of your
CUDA-capable GPU device must be specified by setting the <tt>CUDA_MAJOR_NUM</tt> and
<tt>CUDA_MINOR_NUM</tt> variables, respectively. Next <tt>CUDA_INSTALL_PATH</tt> variable must be
set. This variable points to where CUDA is installed. Finally, the CUDA Toolkit version must be set
with the <tt>CARLSIM_CUDAVER</tt> variable.
<tt>CARLSIM_FASTMATH</tt> (GCC fast-math flag) and <tt>CARLSIM_CUOPTLEVEL</tt> (optimization level,
disable with value 0, enable with values 1-3) are optional settings.

To make sure these settings go into effect, you can either type:
\code
$ source ~/.bashrc
\endcode
or close the shell and open another one.

An alternative way to set the required environment variable is to edit the <tt>user.mk</tt> file
found in the CARLsim root directory.
This can be helpful in case multiple users share the same CARLsim installation and want to use
global configuration settings.
The '=?' sign in "user.mk" indicates the value the variable will be assigned if it is not
already defined in the ".bashrc".
For example, the following line from "user.mk" would assign value 5 to environment variable
<tt>CARLSIM_CUDAVER</tt> if the variable does not already exist:
\code
CARLSIM_CUDAVER ?= 5
\endcode


\subsubsection ch1s2s1s2_cuda_version 1.2.1.2 Finding CUDA Toolkit Version and Compute Capability

The CUDA Toolkit version can be found via:
\code
$ nvcc --version
\endcode
You need only input the major number of the toolkit version
(e.g. 6 for 6.5).

The compute capability of the GPU device can be found by compiling the <tt>deviceQuery</tt> sample in 
the directory <tt>1_Utilities</tt> of the CUDA Toolkit.
\code
# copy NVIDIA Toolkit to home directory
$ cd /usr/local/cuda/bin
$ ./cuda-install-samples-6.5.sh ~
$ cd ~/NVIDIA_CUDA-6.5_Samples/1_Utilities/deviceQuery

# compile and run deviceQuery
$ make
$ ./deviceQuery
\endcode
For CUDA Toolkits other than version 6.5, the paths above need to be changed accordingly.


\subsubsection ch1s2s1s3_compiling 1.2.1.3 Compiling the CARLsim Library

After the environment variables have been set, CARLsim can be compiled and installed via:
\code
$ make
$ sudo make install
\endcode

This is will install the CARLsim library in the location pointed to by <tt>CARLSIM_LIB_DIR</tt>
(see \ref ch1s2s1s1_environment_variables above).

CARLsim comes with an optional automated parameter tuning framework. For more information about
how to install the framework please see \ref ch10_ecj. Additionally, CARLsim now comes with a
regression suite that uses <a href="https://code.google.com/p/googletest/">googletest</a>.
For more information on how to use the regression suite, please see \ref ch11_regression_suite.

\since v3.0


\subsection ch1s2s2_windows 1.2.2 Windows

CARLsim provides solution files for Microsoft Visual Studio (VS) 2012 and CUDA 5.5.
The solution file is called <tt>CARLsim.sln</tt> and is located in the CARLsim root directory.
In addition, every project, tutorial, and the regression suite have their own .vcxproj projects file
in the appropriate directory.

Before building the solution, <tt>Configuration</tt> should be set to <tt>x64</tt>.
<tt>Release</tt> should be selected for project executables, and <tt>Debug</tt> should be selected
for compiling the regression suite.

VS 2012 will then generate all executables (.exe) and the static library (.lib) via "Build Solution".

Newer VS versions will automatically upgrade the solution file (<tt>CARLsim.sln</tt>) and all project files
(<tt>*.vcxproj</tt>).
For newer CUDA Toolkit versions, the strings "CUDA 5.5.props" and "CUDA 5.5.targets" that are present in
every .vcxproj file have to be manually updated to reflect the right CUDA Toolkit version number.

CARLsim comes with an optional automated parameter tuning framework. For more information about
how to install the framework please see \ref ch10_ecj. Additionally, CARLsim now comes with a
regression suite that uses <a href="https://code.google.com/p/googletest/">googletest</a>.
For more information on how to use the regression suite, please see \ref ch11_regression_suite.



\section ch1s3_project_workflow 1.3 Project Workflow
\author Kristofor D. Carlson
\author Ting-Shuo Chou

\section ch1s3s1_linux_project_workflow 1.3.1 Linux / Mac OS X

The easiest way to create a new project is to make a copy of the directory "projects/hello_world/" and all
its corresponding subdirectories.

The Hello World project comes with 

The project workflow is as follows. New users should start with the hello_world project found in the
<tt>projects</tt> directory. The Makefile provided in the directory was made so that usersonly have
to modify a small portion of Makefile to build their own custom project. Below is the modifiable
portion of the Makefile:

\code
# Makefile for building project program from the CARLsim library

# NOTE: if you are compiling your code in a directory different from
# examples/<example_name> or projects/<project_name> then you need to either
# move the configured user.mk file to this directory or set the path to
# where CARLsim can find the user.mk.
USER_MK_PATH = ../../
include $(USER_MK_PATH)user.mk

project := hello_world
output := *.dot *.dat *.log *.csv
\endcode

You have to first point to <tt>USER_MK_PATH</tt> variable to the correct location of the <tt>
user.mk</tt> file. This is because the <tt>user.mk</tt> file has the correct compilation and
linking flags. If the user creates their own project, they need only copy their <tt>user.mk</tt>
file to the same directory or point to the location of the <tt>user.mk file</tt>. Next, you can
change the name of the project by changing the <tt>project</tt> variable. You should not have
to change any other variables in the Makefile to get the CARLsim program to compile.

\warning You must name your .cpp file 'main_<project_name>.cpp' for the Makefile to compile
correctly

Finally, you can add files or file extensions that will be deleted with the 'make clean' or 'make
distclean' commands by adding to the <tt>output</tt> variable.

When a CARLsim program is run, it outputs any spike or synaptic weight data to the results directory in
the directory in which it was run by default. When 'make clean' is run, the binary and output files
are deleted by default, but the contents of the results directory are not deleted. When 'make
distclean' is run, the binary, output files, and contents of the results directory are deleted.

\warning When 'make distclean' is called. All data files in the results directory will be deleted!

In general, users may find themselves most productive creating their own project directory in the
<tt>projects</tt> directory and running their simulations with that directory. At the same time, users
use the CARLsim Offline Analysis Toolkit (OAT) MATLAB scripts to analyze the data files output to
the <tt>results</tt> directory after every simulation. This provides users with information about
their simulation. Often times, it makes the most sense to run CARLsim simulations for small amounts
of time while designing the spiking neural networks as the OAT scripts can provide valuable feedback
as to how the network is behaving. For more information about CARLsim data files or the OAT, please
see \ref ch7_monitoring or \ref ch9_visualization

\section ch1s3s2_windows_project_workflow 1.3.2 Windows

On Windows platform, four steps are required to build your own project. First, create your own 
project directory. Second,copy the template project file <tt>hello_world.vcxproj</tt> and 
<tt>main_hello_world.cpp</tt> in projects directory into your directory. Third, rename the .cpp
and .vcxproj file to <tt>YOUR_PROJECT_NAME</tt>. Forth, add your project to <tt>CARLsim.sln</tt>.
Finally, you can build, rebuild, or clean the project through MS Visual Studio.

\since v3.0

*/
