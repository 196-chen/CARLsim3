/*!

\page ch1_getting_started Chapter 1: Getting Started

\tableofcontents

\section ch1s1_preinstallation 1.1 Pre-Installation
\author Kristofor D. Carlson

CARLsim currently requires the NVIDIA CUDA parallel computing platform to be installed
even if one does not plan to use the GPU implementation of CARLsim. Future versions of CARLsim
that allow users to run the CPU implementation of CARLsim without installing CUDA are planned.
CARLsim requires GPUs with a compute capability of 2.0 or higher. To see find the compute
capability of your device you can check <a href="http://en.wikipedia.org/wiki/CUDA" target="_blank"><b>here</b></a>.
CARLsim also requires CUDA Toolkit 5.0 and up. For CUDA installation instructrions for your
platform, please navigate to the NVIDIA
<a href="https://developer.nvidia.com/cuda-zone" target="_blank"><b>CUDA Zone</b></a>.
The rest of the chapter assumes you have successfully installed CUDA and have the
appropriate hardware.


\subsection ch1s1s1_os 1.1.1 Supported OS's
CARLsim has been tested on the following platforms:
- Windows 7
- Ubuntu 12.04
- Ubuntu 12.10
- Ubuntu 13.04
- Ubuntu 13.10
- Ubuntu 14.04
- Arch Linux
- CentOS 6

\subsection ch1s1s2_os 1.1.2 Source Directory Layout
Below is the directory layout of the CARLsim source code. The <tt>carlsim</tt> folder contains
the source code for carlsim. The sub-folders are key components to the CARLsim simulation library.
The <tt>doc</tt> folder contains doxygen-related files and the generated documentation. The
<tt>examples</tt> folder contains example code for a number of CARLsim examples. The
<tt>projects</tt> folder contains a template for writing your first CARLsim program. Users will
start here when they begin writing their first program. The <tt>tools</tt> directory contains a
number of CARLsim plugins that may be useful to users such as parameter tuning frameworks, MATLAB
scripts, spike generators, and tools for visual stimuli.

\code
├── carlsim
│   ├── connection_monitor
│   ├── group_monitor
│   ├── interface
│   ├── kernel
│   ├── server
│   ├── spike_monitor
│   └── test
├── doc
│   ├── html
│   └── source
├── examples
│   ├── colorblind
│   ├── colorcycle
│   ├── common
│   ├── dastdp
│   ├── multiGPU
│   ├── orientation
│   ├── random
│   ├── spikeInfo
│   ├── tuneFiringRatesECJ
│   └── v1MTLIP
├── projects
│   └── hello_world
└── tools
    ├── ecj_pti
    ├── eo_pti
    ├── offline_analysis_toolbox
    ├── simple_weight_tuner
    ├── spike_generators
    └── visual_stimulus
\endcode

\since v3.0

\section ch1s2_installation 1.2 Installation
\author Kristofor D. Carlson
\author Ting-Shuo Chou

To install CARLsim, first download and unzip the zip file from our
<a href="http://www.socsci.uci.edu/~jkrichma/CARLsim/index.html"> website </a>. The
installation instructrions differ depending on your OS, so please reference the
appropriate subsection.

\subsection ch1s2s1_linux 1.2.1 Linux

Instructions for Linux installation assume you are using the Bash shell. After you have unzipped
the downloaded CARLsim files, you next have to set installation specific environment-variables such
as information about GPU devices, CUDA Toolkit version, and the desired installation location.

The desired installation location of the CARLsim library is specified with the
<tt>CARLSIM_LIB_DIR</tt> variable. The major and minor compute capability numbers of your
CUDA-capable GPU device must be specified by setting the <tt>CUDA_MAJOR_NUM</tt> and
<tt>CUDA_MINOR_NUM</tt> variables, respectively. Next <tt>CUDA_INSTALL_PATH</tt> variable must be
set. This variable points to where CUDA is installed. Finally, the CUDA Toolkit version must be set
with the <tt>CARLSIM_CUDAVER</tt> variable. <tt>CARLSIM_FASTMATH</tt>, <tt>CARLSIM_CUOPTLEVEL</tt>,
and <tt>CARLSIM_DEBUG</tt> are optional settings. These settings affect the degree of fastmath
optimization (off by default), the degree of CUDA optimization (off by default), and whether or
not to include debugging information (off by default).

The easiest way to set these environment variables is to set them in your .bashrc file. The code
snippet below shows the lines to be added to the end of your .bashrc file. If the variables are
not defined in the .bashrc file, the values defined in the <tt>user.mk</tt> file will be used.

\code
# set CARLsim variables
export CARLSIM_LIB_DIR=/opt/CARL/CARLsim
export CUDA_INSTALL_PATH=/usr/local/cuda
export CARLSIM_CUDAVER=6
export CUDA_MAJOR_NUM=3
export CUDA_MINOR_NUM=5
\endcode

To make sure these settings go into effect, you can either type: \code source ~/.bashrc \endcode or
close the shell and open another one. To find the CUDA Toolkit version you are using you can type:

\code nvcc --version \endcode

You need only input the major number of the toolkit version
(e.g. 6 for 6.5). To find compute capability of your GPU device can be found by running:

\code deviceQuery \endcode

which can usually be found in the following directory (for a 64-bit Linux distribution):

\code <cuda_installation_directory>/cuda/samples/bin/x86_64/linux/release \endcode


An alternative way to set the required environment variable is to edit the <tt>user.mk</tt> file
found in the CARLsim root directory. The '=?' sign in the user.mk file indicates the value the
variable will be assigned if it is not already defined. Therefore, the environment variables you
define in your .bashrc file will overide these values. This is shown in the code snippet below
of the <tt>user.mk</tt> file.

\code
#------------------------------------------------------------------------------
# USER-MODIFIABLE COMPONENT OF MAKEFILE
#
# Note: all paths should be absolute (start with /)
#------------------------------------------------------------------------------
# desired installation path of libcarlsim and headers
CARLSIM_LIB_DIR ?= /opt/CARL/CARLsim

# cuda capability major version number for GPU device
CUDA_MAJOR_NUM ?= 2
# cuda capability minor version number for GPU device
CUDA_MINOR_NUM ?= 0
# cuda toolkit version (major number only)
CARLSIM_CUDAVER ?= 5

# CUDA Installation location. If your CUDA installation is not /usr/local/cuda,
# please set CUDA_INSTALL_PATH to point to the correct location or set it as
# an environment variable.
CUDA_INSTALL_PATH ?= /usr/local/cuda

# $(OPT_LEVEL): set to 1, 2, or 3 if you want to use optimization.  Default: 0.
# $(DEBUG_INFO): set to 1 to include debug info, set to 0 to not include
# debugging info.  Default: 0.
CARLSIM_FASTMATH ?= 0
CARLSIM_CUOPTLEVEL ?= 0
CARLSIM_DEBUG ?= 0
\endcode

After the environment variables have been set, CARLsim can be compiled and installed. To compile
and install the CARLsim library, type:

\code
make && sudo make install
\endcode

This is will install the CARLsim library in the location pointed to by <tt>CARLSIM_LIB_DIR</tt>.
CARLsim comes with an optional automated parameter tuning framework. For more information about
how to install the framework please see \ref ch10_ecj. Additionally, CARLsim now comes with a
regression suite that uses <a href="https://code.google.com/p/googletest/">googletest</a>.
For more information on how to use the regression suite, please see \ref ch11_regression_suite.

\since v3.0

\subsection ch1s2s2_windows 1.2.2 Windows
On Windows platform, CARLsim 3 includes a solution file and project files for each examples and 
regression suite. For more information, please see \ref ch11_regression_suite. The solution file 
was created by Visual Studio (VS) 2012 with CUDA 5.5. If you happened to use the same version, 
<tt>Build Solution</tt> in VS 2012 will generate all executables (.exe) and static library 
(.lib) for you. Before buiding the solution or projects, please make sure <tt>Configuration</tt> 
is set to <tt>x64</tt> and <tt>Release</tt> for example executables and <tt>Debug</tt> for 
regression suite. For higher version of VS, <tt>CARLsim.sln</tt> and <tt>*.vcxproj</tt> will be 
automatically upgraded by VS. For higher version of CUDA toolkit, please replace <tt>5.5</tt> 
with <tt>YOUR_CUDA_VERSION</tt> in every <tt>*.vcxproj</tt> file and add them back to 
<tt>CARLsim.sln</tt>.

\see \ref ch10_ecj
\see \ref ch11_regression_suite

\section ch1s3_documentation 1.3 Documentation
\author Kristofor D. Carlson

CARLsim uses <a href="http://www.stack.nl/~dimitri/doxygen/">doxygen</a> to automatically generate
HTML documentation for the C/C++ source code. Additionally, the user-guide you are reading and the
tutorial are written in doxygen. To generate the documentation in Linux, enter the <tt>doc</tt>
directory found in the CARLsim root directory and run the documentation generation script:

\code ./makedoc \endcode

\note Currently, CARLsim 3 does not support automatically generated documentation on Windows platform.

\since 3.0

\section ch1s4_project_workflow 1.4 Project Workflow
\author Kristofor D. Carlson
\author Ting-Shuo Chou

\section ch1s4s1_linux_project_workflow 1.4.1

The project workflow is as follows. New users should start with the hello_world project found in the
<tt>projects</tt> directory. The Makefile provided in the directory was made so that usersonly have
to modify a small portion of Makefile to build their own custom project. Below is the modifiable
portion of the Makefile:

\code
# Makefile for building project program from the CARLsim library

# NOTE: if you are compiling your code in a directory different from
# examples/<example_name> or projects/<project_name> then you need to either
# move the configured user.mk file to this directory or set the path to
# where CARLsim can find the user.mk.
USER_MK_PATH = ../../
include $(USER_MK_PATH)user.mk

project := hello_world
output := *.dot *.dat *.log *.csv
\endcode

You have to first point to <tt>USER_MK_PATH</tt> variable to the correct location of the <tt>
user.mk</tt> file. This is because the <tt>user.mk</tt> file has the correct compilation and
linking flags. If the user creates their own project, they need only copy their <tt>user.mk</tt>
file to the same directory or point to the location of the <tt>user.mk file</tt>. Next, you can
change the name of the project by changing the <tt>project</tt> variable. You should not have
to change any other variables in the Makefile to get the CARLsim program to compile.

\warning You must name your .cpp file 'main_<project_name>.cpp' for the Makefile to compile
correctly

Finally, you can add files or file extensions that will be deleted with the 'make clean' or 'make
distclean' commands by adding to the <tt>output</tt> variable.

When a CARLsim program is run, it outputs any spike or synaptic weight data to the results folder in
the directory in which it was run by default. When 'make clean' is run, the binary and output files
are deleted by default, but the contents of the results directory are not deleted. When 'make
distclean' is run, the binary, output files, and contents of the results directory are deleted.

\warning When 'make distclean' is called. All data files in the results directory will be deleted!

In general, users may find themselves most productive creating their own project directory in the
<tt>projects</tt> directory and running their simulations with that folder. At the same time, users
use the CARLsim Offline Analysis Toolkit (OAT) MATLAB scripts to analyze the data files output to
the <tt>results</tt> directory after every simulation. This provides users with information about
their simulation. Often times, it makes the most sense to run CARLsim simulations for small amounts
of time while designing the spiking neural networks as the OAT scripts can provide valuable feedback
as to how the network is behaving. For more information about CARLsim data files or the OAT, please
see \ref ch7_monitoring or \ref ch9_visualization

\section ch1s4s2_windows_project_workflow 1.4.2

On Windows platform, four steps are required to build your own project. First, create your own 
project folder. Second,copy the template project file <tt>hello_world.vcxproj</tt> and 
<tt>main_hello_world.cpp</tt> in projects directory into your folder. Third, rename the .cpp
and .vcxproj file to <tt>YOUR_PROJECT_NAME</tt>. Forth, add your project to <tt>CARLsim.sln</tt>.
Finally, you can build, rebuild, or clean the project through MS Visual Studio.

\since v3.0

*/
