========================================================================================================================
CARLSIM INSTALLATION
========================================================================================================================

Use of CARLsim requires that the NVIDIA CUDA driver and NVIDIA CUDA SDK are installed and functional.

This code has been predominately developed under Linux and the build instructions reflect that.
While the code should function under MS Windows these instructions are not applicable. We will hopefully release
instructions in the future on how to setup the code base under Visual Studio on Windows based systems.



INSTALLING NVIDIA CUDA SDK
------------------------------------------------------------------------------------------------------------------------

Download and install NVIDIA CUDA SDK from from: https://developer.nvidia.com/cuda-downloads (see website for
platform-dependent installation instructions).

In order to run CARLsim, the cutil library must be compiled (libcutil). This can be achieved by compiling at least one
CUDA SDK example.



SETTING UP ENVIRONMENT VARIABLES
------------------------------------------------------------------------------------------------------------------------

Once that has been accomplished, you need to setup an environment variable that points to where the NVIDIA SDK is
located. So, under most linux systems do something like the following:

$ export NVIDIA_SDK=(SOME PATH)/NVIDIA_GPU_Computing_SDK

where (SOME PATH) is the actual path to the SDK on your system. The environment variable $NVIDIA_SDK will then be used
in the CARLsim Makefile to compile your network.

Also, make sure that the environment variable $LD_LIBRARY_PATH exists (should have been created during the installation
of CUDA SDK). On a 64-bit system this could look like this (however, depends on your CUDA install path):

$ export LD_LIBRARY_PATH=/usr/local/cuda/lib64

A good idea would be to add these two "export" lines to your ~/.bashrc, so you don't have to type every time you open
up a new terminal.



COMPILING AND RUNNING A NETWORK
------------------------------------------------------------------------------------------------------------------------

CARLsim can be compiled using either the CUDA5 or the CUDA3 runtime environment. By default, CUDA3 is used. If you want
to use CUDA5, you can set up an environment variable called CARLSIM_CUDAVER and set its value to 5.
Edit your ~/.bashrc:
$ export CARLSIM_CUDAVER=5

CARLsim can be compiled using an increased optimization level and fast math. By default, these flags are not used. In
order to use them, set up an environment variable CARLSIM_FASTMATH and set it to 1:
$ CARLSIM_FASTMATH=1
For more information, please refer to http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/.

The CARLsim software package contains a number of simulation examples, whose source code can be found under the
directory /examples/.
The following examples are available: colorblind, colorcycle, orientation, rdk, v1MTLIP, and v1v4PFC.

All simulation examples follow a common rule: Some experiment (e.g., called "v1MTLIP") has a source file named
"random.cpp" in subdirectory "examples/test/", and should direct all of its output files to a subdirectory
"Results/v1MTLIP/". If Matlab analysis scripts are available for this particular experiment, they can be found in a
subdirectory "scripts/v1MTLIP/".
The experiment can be compiled by typing:
$ make v1MTLIP
This will create an executable called "v1MTLIP". In order to run it, type:
$ ./v1MTLIP

The rdk, orientation, v1MTLIP, and v1v4PFC examples can only be run on a system with a compatible GPU (compute capability 1.3
or higher). The colorblind example most likely must be run on CPU because at high spatial resolution it requires more
memory than most GPUs have available.



CREATING AND COMPILING YOUR OWN NETWORKS
------------------------------------------------------------------------------------------------------------------------

The easiest way to add your own network/experiment to the existing Makefile is the following:
* Create your network/experiment, say "myExp", in a source file called "main_myExp.cpp" and put it in the directory
  "examples/myExp/".
* Within that source file, make sure that all spike monitors output to a directory "Results/myExp/" for consistency
  (see existing examples for inspiration/help).
* Again for consistency, if you have any input videos, add them to directory "videos/".
* Add your experiment name ("myExp") to the list of known experiments in the Makefile.
  - If you want to use either the color opponency or the motion energy model (both contained in the various v1ColorME
    CUDA files), add your experiment name to the variable EXE_CU_21 (Makefile l.72, all experiments separated by
    spaces).
  - If you do not want to use either of the models, add your experiment name to the variable EXE_CU_NONE (Makefile l.70)
* Now simply type
  $ make myExp
  in the current directory, and you are good to go.


MAKEFILE HELP AND MAINTENANCE
------------------------------------------------------------------------------------------------------------------------

For more information on the above, please refer to the Makefile.

You can automatically clean up all object files, executables, etc. by typing
$ make clean

A help message, which contains the list of all available example experiments can be displayed by typing
$ make help